<?php

/**
 * This is a modified version of the BaseAuthenticate class that is supplied with CakePHP.
 * It has been modified to support AD authentication.
 */

App::uses('Security', 'Utility');
App::uses('Hash', 'Utility');

/**
 * Base Authentication class with common methods and properties.
 */
abstract class BaseAuthenticate {

/**
 * Settings for this object.
 */
    public $settings = array(
        'host' => 'localhost',
        'port' => '389',
        'baseDn' => false,
        'uidAttribute' => 'samaccountname',
        'userAttributes' => array(
            'cn',
            'sn',
            'givenName',
        ),
        'requireGroup' => false,
        'fields' => array(
            'username' => 'username',
            'password' => 'password'
        ),
        'userModel' => 'User'
    );

/**
 * A Component collection, used to get more components.
 *
 * @var ComponentCollection
 */
	protected $_Collection;

/**
 * Password hasher instance.
 *
 * @var AbstractPasswordHasher
 */
	protected $_passwordHasher;

/**
 * Constructor
 *
 * @param ComponentCollection $collection The Component collection used on this request.
 * @param array $settings Array of settings to use.
 */
	public function __construct(ComponentCollection $collection, $settings) {
		$this->_Collection = $collection;
		$this->settings = Hash::merge($this->settings, $settings);
	}

/**
 * Find a user in LDAP
 */
    protected function _findUser($username, $password=null){

        //Connect to LDAP
        if(!is_array($this->settings['host']))
            $this->settings['host'] = array($this->settings['host']);
        foreach($this->settings['host'] as $host){
            $ldapConn = $this->_connect($host, $this->settings['port']);
            if($ldapConn !== false)
                break;
        }

        if($ldapConn === false)
            return false;

        //Try to bind to AD as user
        if(!@$this->_bind($ldapConn, $username, $password))
            return false;

        //Get user attributes
        $userAttributes = $this->_getUserAttributes($ldapConn, $username);
        $userAttributes['username'] = $username;
        $userDn = $userAttributes['dn'];

        //Get user group membership
        $userGroups = $this->_getADUserGroups($ldapConn, $userDn);

        //Check if a user is a member of the required group
        if(!$this->_isMemberOfRequiredGroup($userGroups))
            return false;

        return array_merge(
            $userAttributes,
            array(
                'Group' => $userGroups
            )
        );
    }
   
/**
 * Connect to an LDAP host
 */ 
    private function _connect($hostname, $port){

        $conn = ldap_connect($hostname, $port);
        if($conn === false)
            throw new \Exception("Failed to connect to ldap server $hostname");

        ldap_set_option($conn, LDAP_OPT_PROTOCOL_VERSION, 3);
        ldap_set_option($conn, LDAP_OPT_REFERRALS, 0);

        return $conn;
    }

/**
 * Bind to LDAP
 */
    private function _bind($conn, $username, $password){

        return ldap_bind($conn, $username, $password);
    }

/**
 * Retrieve a user's attributes
 */
    private function _getUserAttributes($conn, $username){

        $result = ldap_search(
            $conn, 
            $this->settings['baseDn'],
            "(".$this->settings['uidAttribute']."=".$this->_realUsername($username).")",
            $this->settings['userAttributes']
        );

        if($result === false)
            return false;

        $entries = ldap_get_entries($conn, $result);
        if($entries['count'] != 1)
            return false;

        $user = $entries[0];

        $userAttributes = array(
            'dn' => $user['dn']
        );
        foreach($this->settings['userAttributes'] as $attrName){

            $attrName = strtolower($attrName);

            $attrCount = $user[$attrName]['count'];
            unset($user[$attrName]['count']);
            if($attrCount == 0){
                $userAttributes[$attrName] = null;
            }
            elseif($attrCount == 1){
                $userAttributes[$attrName] = $user[$attrName][0];
            }
            else {
                $userAttributes[$attrName] = $user[$attrName];
            }
        }

        return $userAttributes; 
    }

/**
 * Retrieve a user's groups
 */
    private function _getADUserGroups($conn, $dn){

        $result = ldap_search(
            $conn,
            $this->settings['baseDn'],
            "(distinguishedname=${dn})",
            array(
                'memberof',
                'primarygroupid'
            )
        );

        if($result === false)
            return false;

        $entries = ldap_get_entries($conn, $result); 
        if($entries['count'] == 0)
            return array();

        //Parse group DNs into a list of group names
        $groupDns = $entries[0]['memberof'];
        unset($groupDns['count']);
        foreach($groupDns as $groupDn){
            $groups[] = array(
                'dn' => $groupDn,
                'name' => substr($groupDn, strlen('CN='), strpos($groupDn, ',') - strlen('CN='))
            );
        }

        //Microsoft likes to make things hard :(
        //A user's primary group is not included in the membersOf list.
        //A user is associated with their primary group with the attribute
        //primaryGroupId. This is not your typical ID however. The 
        //primaryGroupId refers to the last token of the groups SID
        //where the SID looks like S-1-5-32-544. Unfortunately the
        //SID is a binary attribute which means we also can't run a partial
        //match like (objectsid=*${primaryGroupId}). The last option we have
        //is to get a list of every group from the domain and iterate over
        //them until we find the group with the matching SID.
        //I dislike AD but not enough to make it suffer that much.
        //We'll live without the users primary group for now.
        $primaryGroupId = $entries[0]['primarygroupid'][0];

        return $groups;
    }

/**
 * Check if there is an intersection between the required groups and the 
 * member groups.
 */
    private function _isMemberOfRequiredGroup($memberGroups){

        if($this->settings['requireGroup'] === false)
            return true;

        $groupNameList = Hash::extract($memberGroups, '{n}.name');

        if(is_array($this->settings['requireGroup'])) {
            foreach($groupNameList as $group){
                if(in_array($group, $this->settings['requireGroup']))
                    return true;
            }
            return false;
        }

        return in_array($this->settings['requireGroup'], $groupNameList);
    }

/**
 * Extract the real username from the supplied username.
 *
 * This is only required to make AD integration easier.
 * AD requires you to bind with a username
 * of the format DOMAIN\username or username@domain.
 */
    private function _realUsername($username){

        $posOfSlash = strpos($username, '\\');
        $posOfAt = strpos($username, '@');

        if($posOfSlash !== false)
            return substr($username, $posOfSlash+1);
       
        if($posOfAt !== false)
            return substr($username, 0, $posOfAt);

        return $username;
    }

/**
 * Authenticate a user based on the request information.
 *
 * @param CakeRequest $request Request to get authentication information from.
 * @param CakeResponse $response A response object that can have headers added.
 * @return mixed Either false on failure, or an array of user data on success.
 */
	abstract public function authenticate(CakeRequest $request, CakeResponse $response);

/**
 * Allows you to hook into AuthComponent::logout(),
 * and implement specialized logout behavior.
 *
 * All attached authentication objects will have this method
 * called when a user logs out.
 *
 * @param array $user The user about to be logged out.
 * @return void
 */
	public function logout($user) {
	}

/**
 * Get a user based on information in the request. Primarily used by stateless authentication
 * systems like basic and digest auth.
 *
 * @param CakeRequest $request Request object.
 * @return mixed Either false or an array of user information
 */
	public function getUser(CakeRequest $request) {
		return false;
	}

/**
 * Handle unauthenticated access attempt.
 *
 * @param CakeRequest $request A request object.
 * @param CakeResponse $response A response object.
 * @return mixed Either true to indicate the unauthenticated request has been
 *  dealt with and no more action is required by AuthComponent or void (default).
 */
	public function unauthenticated(CakeRequest $request, CakeResponse $response) {
	}

}
